pipeline {
    agent any 

    environment {
        DISCORD_WEBHOOK_URL = credentials('DISCORD_WEBHOOK_URL')
    }

    stages {
        stage('clear existing image and container') {
            steps {
                script {
                    sh "echo deleting existing image and container"
                    try {sh "rm .env"} catch (Exception e) {echo "No .env to remove"}
                    try {sh "docker rm middleware-service -f"} catch (Exception e) {echo "No container to remove"}
                    try {sh "docker rmi middleware-service"} catch (Exception e) {echo "No existing image to remove"}
                }
            }
            post {
                failure {
                    discordSend description: "Failed to clear existing image and container.", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                }
            }
        }
        stage('build image') {
            steps {
                script {
                    sh "docker build -t middleware-service ."
                }
            }
            post {
                failure {
                    discordSend description: "Failed to build image.", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                }
            }
        }
        stage('deploy') {
            steps {
                script {
                    sh "docker run -d --name middleware-service -p 9014:3000 --restart unless-stopped middleware-service"
                }
            }
            post {
                success {
                    discordSend description: "Deployed image successfully.", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                }
                failure {
                    discordSend description: "Failed to deploy image.", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "${DISCORD_WEBHOOK_URL}"
                }
            }
        }
    }
}  

def dockerExec(command) {
    sh "docker exec ${CONTAINER_NAME} ${command}"
}